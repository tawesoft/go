2021-03-13

    * The envelope From field has been renamed ReturnPath. It was intended for
      this change to make part of the 2021-03-07 changes - apologies for its
      late inclusion. This should be the last breaking API change.

2021-03-12

    * Add JSON (de)serialisation

    * Add missing error case

2021-03-07

    * Breaking changes to this email package, as previously warned, bump the
      monorepo tagged version to v0.2.0 and upgrade the email package stability
      rating from "unstable" to "candidate". For previous behavior, point your
      imports to `tawesoft.co.uk/go/legacy/email`.

    * Attachments are now read/written more efficiently.

    * Attachments are now closed properly!

    * Attachment Reader method is now required to return something satisfying
      the io.ReadCloser interface. If no Close is required, wrap the return
      value in an `io.NopCloser`.

    * The Envelope struct no longer has a message field - instead, use
      an (Envelope, Message) 2-tuple where you need both of these items.

    * An email's Message-ID header is no longer implicitly generated for an
      email. This is left to the mail submission agent.

    * If you ARE implementing a mail submission agent, an email's Message-ID
      header can be specified by the new ID field on the Message struct type.

    * A cryptographically unique Message ID can be generated from the newly
      exposed function, NewMessageID.

    * The Print method on Message is renamed Write.

    * Email message lines longer than 998 characters are now supported in
      headers using folding white space. Note that some parsers, such as Go's
      `net.mail`, do not understand this syntax (even though it is allowed).

    * The new method WriteCompat on Message won't use folding white space to
      support long headers and will instead generate an error. Use this method
      in preference to Write if you are expecting the consumer of your email
      message (e.g. a Go implementation) will be unable to handle folding white
      space.

