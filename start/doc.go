// tawesoft.co.uk/go/start
// 
// Copyright © 2020 Tawesoft Ltd <open-source@tawesoft.co.uk>
// Copyright © 2020 Ben Golightly <ben@tawesoft.co.uk>
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction,  including without limitation the rights
// to use,  copy, modify,  merge,  publish, distribute, sublicense,  and/or sell
// copies  of  the  Software,  and  to  permit persons  to whom  the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED  "AS IS",  WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR
// IMPLIED,  INCLUDING  BUT  NOT LIMITED TO THE WARRANTIES  OF  MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS  OR COPYRIGHT HOLDERS  BE LIABLE  FOR ANY  CLAIM,  DAMAGES  OR  OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

// Package start implements helpful features for starting a (system) process
// including dropping privileges (while inheriting privileged file handles) and
// managing multiple goroutines with graceful shutdown.
// 
// Examples
// 
// Opening privileged files and ports as root, then drops privileges
//
//     package main
//     
//     import (
//         "fmt"
//         "io/ioutil"
//         "net"
//         "os"
//         "time"
//         
//         "tawesoft.co.uk/go/start"
//     )
//     
//     func main() {
//         if len(os.Args) < 2 {
//             panic(fmt.Sprintf("USAGE: sudo %s username\n", os.Args[0]))
//         }
//         
//         var (
//             ln net.Listener
//             rootfile *os.File
//             username = os.Args[1]
//         )
//         
//         // If the program is run as root, open privileged resources as root, then
//         // start a child process as `username` that inherits these resources and
//         // the parent process's stdio, and immediately exit.
//         //
//         // If the program is run as non-root, inherit these resources and continue.
//         err := start.Drop(username, []start.Inheritable{
//             {
//                 Name: "privileged-port",
//                 Open: func() (*os.File, error) {
//                     nl, err := net.Listen("tcp4", "127.0.0.1:81")
//                     defer nl.Close()
//                     if err != nil { return nil, err }
//                     fl, err := nl.(*net.TCPListener).File()
//                     if err != nil { return nil, err }
//                     return fl, nil
//                 },
//                 
//                 Set: func(f *os.File) error {
//                     defer f.Close()
//                     fl, err := net.FileListener(f)
//                     if err != nil { return err }
//                     ln = fl
//                     return nil
//                 },
//             },
//             
//             {
//                 Name: "privileged-file",
//                 Open: func() (*os.File, error) {
//                     f, err := os.OpenFile("/tmp/privileged-file-example", os.O_RDWR|os.O_CREATE, 0600)
//                     if err != nil { return nil, err }
//                     f.Write([]byte("this file is only readable by root!\n"))
//                     return f, err
//                 },
//             
//                 Set: func(f *os.File) error {
//                     rootfile = f
//                     rootfile.Seek(0, 0)
//                     return nil
//                 },
//             },
//         })
//         if err != nil { panic(err) }
//         
//         
//         // At this point, the program is no longer running as root, but it still
//         // has access to these privileged resources.
//         
//         defer rootfile.Close()
//         contents, err := ioutil.ReadAll(rootfile)
//         if err != nil { panic(err) }
//         fmt.Printf("read file result: %s", string(contents))
//         
//         time.Sleep(10)
//     }
//
//
// Package Information
//
// License: MIT (see LICENSE.txt)
//
// Stable: candidate
//
// For more information, documentation, source code, examples, support, links,
// etc. please see https://www.tawesoft.co.uk/go and 
// https://www.tawesoft.co.uk/go/start
package start // import "tawesoft.co.uk/go/start"

// Code generated by internal. DO NOT EDIT.
// Instead, edit DESC.txt and run mkdocs.sh.